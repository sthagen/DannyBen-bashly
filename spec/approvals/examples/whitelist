+ bashly generate
creating user files in src
created src/initialize.sh
created src/root_command.sh
created ./login
run ./login --help to test your bash script
+ ./login
missing required argument: REGION
usage: login REGION [ENVIRONMENT] [OPTIONS]
+ ./login -h
login - Sample showing the use of arg and flag whitelist (allowed values)

Usage:
  login REGION [ENVIRONMENT] [OPTIONS]
  login --help | -h
  login --version | -v

Options:
  --help, -h
    Show this help

  --version, -v
    Show version number

  --user, -u NAME (required)
    User name
    Allowed: user, admin

  --protocol, -p TYPE
    Protocol to connect with
    Allowed: ftp, ssh, http
    Default: ssh

Arguments:
  REGION
    Region to connect to
    Allowed: eu, us

  ENVIRONMENT
    Environment to connect to
    Allowed: stage, production, development
    Default: development

+ ./login america
missing required flag: --user, -u NAME
+ ./login america --user admin
region must be one of: eu, us
+ ./login eu --user hacker
--user must be one of: user, admin
+ ./login eu --user admin
# this file is located in 'src/root_command.sh'
# you can edit it freely and regenerate (it will not be overwritten)
args:
- ${args[environment]} = development
- ${args[--protocol]} = ssh
- ${args[region]} = eu
- ${args[--user]} = admin
+ ./login us --user user --protocol icmp
--protocol must be one of: ftp, ssh, http
+ ./login eu production --user admin --protocol ssh
# this file is located in 'src/root_command.sh'
# you can edit it freely and regenerate (it will not be overwritten)
args:
- ${args[environment]} = production
- ${args[--protocol]} = ssh
- ${args[region]} = eu
- ${args[--user]} = admin
